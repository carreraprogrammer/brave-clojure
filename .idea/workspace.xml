<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="13c3015d-8695-4779-8255-099ac37eba74" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.nrepl-port" beforeDir="false" afterPath="$PROJECT_DIR$/.nrepl-port" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/solutions-CH5.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/solutions-CH5.clj" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsProjectDetails">
    <option name="cachedModuleDetails">
      <map>
        <entry key="$PROJECT_DIR$/deps.edn">
          <value>
            <ModuleDetails>
              <option name="details" value="{:paths [&quot;/home/asus/brave-clojure/src&quot;], :deps {org.clojure/clojure {:mvn/version &quot;1.11.1&quot;}, com.fulcrologic/fulcro {:mvn/version &quot;3.0.0-beta-13&quot;}, org.clojure/clojurescript {:mvn/version &quot;1.10.520&quot;}}, :aliases {:deps {:replace-paths [], :replace-deps {org.clojure/tools.deps.alpha {:mvn/version &quot;0.15.1254&quot;}, org.slf4j/slf4j-nop {:mvn/version &quot;1.7.25&quot;}}, :ns-default clojure.tools.cli.api, :ns-aliases {help clojure.tools.cli.help}}, :test {:extra-paths [&quot;/home/asus/brave-clojure/test&quot;]}, :mvn/repos {&quot;cognitect-dev-tools&quot; {:url &quot;https://dev-tools.cognitect.com/maven/releases/&quot;}}, :dev {:extra-deps {thheller/shadow-cljs {:mvn/version &quot;2.8.52&quot;}, binaryage/devtools {:mvn/version &quot;0.9.10&quot;}, org.clojure/clojurescript {:mvn/version &quot;1.10.520&quot;}}}}, :mvn/repos {&quot;central&quot; {:url &quot;https://repo1.maven.org/maven2/&quot;}, &quot;clojars&quot; {:url &quot;https://repo.clojars.org/&quot;}}, :system-aliases #{:mvn/repos :test :deps}, :deps-tree {com.cognitect/transit-java {:mvn/version &quot;0.8.337&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-clj], :paths [&quot;/home/asus/.m2/repository/com/cognitect/transit-java/0.8.337/transit-java-0.8.337.jar&quot;], :children (commons-codec/commons-codec com.fasterxml.jackson.core/jackson-core org.msgpack/msgpack javax.xml.bind/jaxb-api)}, org.clojure/data.json {:mvn/version &quot;0.2.6&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript com.wsscode/pathom], :paths [&quot;/home/asus/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar&quot;], :children ()}, org.clojure/clojure {:mvn/version &quot;1.11.1&quot;, :deps/manifest :mvn, :paths [&quot;/home/asus/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar&quot;], :dependents [], :children (org.clojure/core.specs.alpha org.clojure/spec.alpha)}, com.wsscode/pathom {:mvn/version &quot;2.2.14&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/com/wsscode/pathom/2.2.14/pathom-2.2.14.jar&quot;], :children (spec-coerce/spec-coerce com.wsscode/spec-inspec camel-snake-kebab/camel-snake-kebab)}, commons-codec/commons-codec {:mvn/version &quot;1.10&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/home/asus/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar&quot;], :children ()}, org.clojure/tools.analyzer {:mvn/version &quot;0.6.9&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/home/asus/.m2/repository/org/clojure/tools.analyzer/0.6.9/tools.analyzer-0.6.9.jar&quot;], :children ()}, com.google.errorprone/error_prone_annotations {:mvn/version &quot;2.1.3&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/home/asus/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar&quot;], :children ()}, org.clojure/core.specs.alpha {:mvn/version &quot;0.2.62&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/home/asus/.m2/repository/org/clojure/core.specs.alpha/0.2.62/core.specs.alpha-0.2.62.jar&quot;], :children ()}, edn-query-language/eql {:mvn/version &quot;0.0.7&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/edn-query-language/eql/0.0.7/eql-0.0.7.jar&quot;], :children ()}, expound/expound {:mvn/version &quot;0.7.2&quot;, :deps/manifest :mvn, :dependents [gnl/ghostwheel], :paths [&quot;/home/asus/.m2/repository/expound/expound/0.7.2/expound-0.7.2.jar&quot;], :children ()}, org.clojure/spec.alpha {:mvn/version &quot;0.3.218&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojure], :paths [&quot;/home/asus/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar&quot;], :children ()}, org.codehaus.mojo/animal-sniffer-annotations {:mvn/version &quot;1.14&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/home/asus/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar&quot;], :children ()}, com.taoensso/encore {:mvn/version &quot;2.94.0&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro com.taoensso/tufte], :paths [&quot;/home/asus/.m2/repository/com/taoensso/encore/2.94.0/encore-2.94.0.jar&quot;], :children (com.taoensso/truss)}, org.clojure/tools.analyzer.jvm {:mvn/version &quot;0.7.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.async], :paths [&quot;/home/asus/.m2/repository/org/clojure/tools.analyzer.jvm/0.7.0/tools.analyzer.jvm-0.7.0.jar&quot;], :children (org.clojure/tools.analyzer org.clojure/core.memoize org.ow2.asm/asm-all)}, cljsjs/react-dom {:mvn/version &quot;16.8.6-0&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro cljsjs/react-dom-server], :paths [&quot;/home/asus/.m2/repository/cljsjs/react-dom/16.8.6-0/react-dom-16.8.6-0.jar&quot;], :children ()}, com.taoensso/tufte {:mvn/version &quot;2.0.1&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/com/taoensso/tufte/2.0.1/tufte-2.0.1.jar&quot;], :children ()}, com.googlecode.json-simple/json-simple {:mvn/version &quot;1.1.1&quot;, :exclusions #{junit/junit}, :deps/manifest :mvn, :dependents [org.msgpack/msgpack], :paths [&quot;/home/asus/.m2/repository/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar&quot;], :children ()}, gnl/ghostwheel {:mvn/version &quot;0.3.9&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/gnl/ghostwheel/0.3.9/ghostwheel-0.3.9.jar&quot;], :children (expound/expound gnl/ghostwheel.logging orchestra/orchestra gnl/ghostwheel.unghost org.clojure/test.check)}, com.cognitect/transit-cljs {:mvn/version &quot;0.8.256&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/com/cognitect/transit-cljs/0.8.256/transit-cljs-0.8.256.jar&quot;], :children (com.cognitect/transit-js)}, org.clojure/google-closure-library {:mvn/version &quot;0.0-20170809-b9c14c6b&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;/home/asus/.m2/repository/org/clojure/google-closure-library/0.0-20170809-b9c14c6b/google-closure-library-0.0-20170809-b9c14c6b.jar&quot;], :children (org.clojure/google-closure-library-third-party)}, io.aviso/pretty {:mvn/version &quot;0.1.33&quot;, :deps/manifest :mvn, :dependents [com.taoensso/timbre], :paths [&quot;/home/asus/.m2/repository/io/aviso/pretty/0.1.33/pretty-0.1.33.jar&quot;], :children ()}, org.clojure/clojurescript {:mvn/version &quot;1.10.520&quot;, :deps/manifest :mvn, :paths [&quot;/home/asus/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar&quot;], :dependents [], :children (org.clojure/data.json org.clojure/google-closure-library org.mozilla/rhino org.clojure/tools.reader com.google.javascript/closure-compiler-unshaded)}, spec-coerce/spec-coerce {:mvn/version &quot;1.0.0-alpha6&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom], :paths [&quot;/home/asus/.m2/repository/spec-coerce/spec-coerce/1.0.0-alpha6/spec-coerce-1.0.0-alpha6.jar&quot;], :children ()}, com.google.jsinterop/jsinterop-annotations {:mvn/version &quot;1.0.0&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/com/google/jsinterop/jsinterop-annotations/1.0.0/jsinterop-annotations-1.0.0.jar&quot;], :children ()}, com.wsscode/spec-inspec {:mvn/version &quot;1.0.0-alpha2&quot;, :deps/manifest :mvn, :dependents [spec-coerce/spec-coerce com.wsscode/pathom], :paths [&quot;/home/asus/.m2/repository/com/wsscode/spec-inspec/1.0.0-alpha2/spec-inspec-1.0.0-alpha2.jar&quot;], :children ()}, com.fasterxml.jackson.core/jackson-core {:mvn/version &quot;2.8.7&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/home/asus/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.8.7/jackson-core-2.8.7.jar&quot;], :children ()}, cljsjs/react {:mvn/version &quot;16.8.6-0&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro cljsjs/react-dom], :paths [&quot;/home/asus/.m2/repository/cljsjs/react/16.8.6-0/react-16.8.6-0.jar&quot;], :children ()}, com.cognitect/transit-js {:mvn/version &quot;0.8.846&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-cljs], :paths [&quot;/home/asus/.m2/repository/com/cognitect/transit-js/0.8.846/transit-js-0.8.846.jar&quot;], :children ()}, org.mozilla/rhino {:mvn/version &quot;1.7R5&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;/home/asus/.m2/repository/org/mozilla/rhino/1.7R5/rhino-1.7R5.jar&quot;], :children ()}, com.taoensso/truss {:mvn/version &quot;1.5.0&quot;, :deps/manifest :mvn, :dependents [com.taoensso/encore], :paths [&quot;/home/asus/.m2/repository/com/taoensso/truss/1.5.0/truss-1.5.0.jar&quot;], :children ()}, org.clojure/google-closure-library-third-party {:mvn/version &quot;0.0-20170809-b9c14c6b&quot;, :deps/manifest :mvn, :dependents [org.clojure/google-closure-library], :paths [&quot;/home/asus/.m2/repository/org/clojure/google-closure-library-third-party/0.0-20170809-b9c14c6b/google-closure-library-third-party-0.0-20170809-b9c14c6b.jar&quot;], :children ()}, com.fulcrologic/fulcro {:mvn/version &quot;3.0.0-beta-13&quot;, :deps/manifest :mvn, :paths [&quot;/home/asus/.m2/repository/com/fulcrologic/fulcro/3.0.0-beta-13/fulcro-3.0.0-beta-13.jar&quot;], :dependents [], :children (com.wsscode/pathom edn-query-language/eql com.taoensso/encore cljsjs/react-dom com.taoensso/tufte gnl/ghostwheel com.cognitect/transit-cljs cljsjs/react com.taoensso/timbre com.cognitect/transit-clj cljsjs/react-dom-server org.clojure/core.async)}, com.google.javascript/closure-compiler-externs {:mvn/version &quot;v20180805&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/com/google/javascript/closure-compiler-externs/v20180805/closure-compiler-externs-v20180805.jar&quot;], :children ()}, org.javassist/javassist {:mvn/version &quot;3.18.1-GA&quot;, :deps/manifest :mvn, :dependents [org.msgpack/msgpack], :paths [&quot;/home/asus/.m2/repository/org/javassist/javassist/3.18.1-GA/javassist-3.18.1-GA.jar&quot;], :children ()}, gnl/ghostwheel.logging {:mvn/version &quot;0.3.9&quot;, :deps/manifest :mvn, :dependents [gnl/ghostwheel], :paths [&quot;/home/asus/.m2/repository/gnl/ghostwheel.logging/0.3.9/ghostwheel.logging-0.3.9.jar&quot;], :children ()}, com.google.guava/guava {:mvn/version &quot;25.1-jre&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/com/google/guava/guava/25.1-jre/guava-25.1-jre.jar&quot;], :children (com.google.errorprone/error_prone_annotations org.codehaus.mojo/animal-sniffer-annotations com.google.j2objc/j2objc-annotations org.checkerframework/checker-qual com.google.code.findbugs/jsr305)}, org.msgpack/msgpack {:mvn/version &quot;0.6.12&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/home/asus/.m2/repository/org/msgpack/msgpack/0.6.12/msgpack-0.6.12.jar&quot;], :children (com.googlecode.json-simple/json-simple org.javassist/javassist)}, orchestra/orchestra {:mvn/version &quot;2019.02.06-1&quot;, :deps/manifest :mvn, :dependents [gnl/ghostwheel], :paths [&quot;/home/asus/.m2/repository/orchestra/orchestra/2019.02.06-1/orchestra-2019.02.06-1.jar&quot;], :children ()}, com.google.j2objc/j2objc-annotations {:mvn/version &quot;1.1&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/home/asus/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar&quot;], :children ()}, com.taoensso/timbre {:mvn/version &quot;4.10.0&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/com/taoensso/timbre/4.10.0/timbre-4.10.0.jar&quot;], :children (io.aviso/pretty)}, com.cognitect/transit-clj {:mvn/version &quot;0.8.313&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/com/cognitect/transit-clj/0.8.313/transit-clj-0.8.313.jar&quot;], :children (com.cognitect/transit-java)}, args4j/args4j {:mvn/version &quot;2.0.26&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/args4j/args4j/2.0.26/args4j-2.0.26.jar&quot;], :children ()}, cljsjs/react-dom-server {:mvn/version &quot;16.8.6-0&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro], :paths [&quot;/home/asus/.m2/repository/cljsjs/react-dom-server/16.8.6-0/react-dom-server-16.8.6-0.jar&quot;], :children ()}, gnl/ghostwheel.unghost {:mvn/version &quot;0.3.9&quot;, :deps/manifest :mvn, :dependents [gnl/ghostwheel], :paths [&quot;/home/asus/.m2/repository/gnl/ghostwheel.unghost/0.3.9/ghostwheel.unghost-0.3.9.jar&quot;], :children ()}, org.checkerframework/checker-qual {:mvn/version &quot;2.0.0&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/home/asus/.m2/repository/org/checkerframework/checker-qual/2.0.0/checker-qual-2.0.0.jar&quot;], :children ()}, org.clojure/tools.reader {:mvn/version &quot;1.3.0&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;/home/asus/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar&quot;], :children ()}, com.google.javascript/closure-compiler-unshaded {:mvn/version &quot;v20180805&quot;, :deps/manifest :mvn, :dependents [org.clojure/clojurescript], :paths [&quot;/home/asus/.m2/repository/com/google/javascript/closure-compiler-unshaded/v20180805/closure-compiler-unshaded-v20180805.jar&quot;], :children (com.google.jsinterop/jsinterop-annotations com.google.javascript/closure-compiler-externs com.google.guava/guava args4j/args4j com.google.protobuf/protobuf-java com.google.code.gson/gson)}, org.clojure/test.check {:mvn/version &quot;0.10.0-alpha4&quot;, :deps/manifest :mvn, :dependents [gnl/ghostwheel], :paths [&quot;/home/asus/.m2/repository/org/clojure/test.check/0.10.0-alpha4/test.check-0.10.0-alpha4.jar&quot;], :children ()}, com.google.protobuf/protobuf-java {:mvn/version &quot;3.0.2&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/com/google/protobuf/protobuf-java/3.0.2/protobuf-java-3.0.2.jar&quot;], :children ()}, org.clojure/core.memoize {:mvn/version &quot;0.5.9&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/home/asus/.m2/repository/org/clojure/core.memoize/0.5.9/core.memoize-0.5.9.jar&quot;], :children (org.clojure/core.cache)}, camel-snake-kebab/camel-snake-kebab {:mvn/version &quot;0.4.0&quot;, :deps/manifest :mvn, :dependents [com.wsscode/pathom], :paths [&quot;/home/asus/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.0/camel-snake-kebab-0.4.0.jar&quot;], :children ()}, org.clojure/data.priority-map {:mvn/version &quot;0.0.7&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.cache], :paths [&quot;/home/asus/.m2/repository/org/clojure/data.priority-map/0.0.7/data.priority-map-0.0.7.jar&quot;], :children ()}, com.google.code.findbugs/jsr305 {:mvn/version &quot;3.0.2&quot;, :deps/manifest :mvn, :dependents [com.google.guava/guava], :paths [&quot;/home/asus/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar&quot;], :children ()}, org.clojure/core.cache {:mvn/version &quot;0.6.5&quot;, :deps/manifest :mvn, :dependents [org.clojure/core.memoize], :paths [&quot;/home/asus/.m2/repository/org/clojure/core.cache/0.6.5/core.cache-0.6.5.jar&quot;], :children (org.clojure/data.priority-map)}, org.ow2.asm/asm-all {:mvn/version &quot;4.2&quot;, :deps/manifest :mvn, :dependents [org.clojure/tools.analyzer.jvm], :paths [&quot;/home/asus/.m2/repository/org/ow2/asm/asm-all/4.2/asm-all-4.2.jar&quot;], :children ()}, org.clojure/core.async {:mvn/version &quot;0.4.474&quot;, :deps/manifest :mvn, :dependents [com.fulcrologic/fulcro com.wsscode/pathom], :paths [&quot;/home/asus/.m2/repository/org/clojure/core.async/0.4.474/core.async-0.4.474.jar&quot;], :children (org.clojure/tools.analyzer.jvm)}, javax.xml.bind/jaxb-api {:mvn/version &quot;2.3.0&quot;, :deps/manifest :mvn, :dependents [com.cognitect/transit-java], :paths [&quot;/home/asus/.m2/repository/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar&quot;], :children ()}, com.google.code.gson/gson {:mvn/version &quot;2.7&quot;, :deps/manifest :mvn, :dependents [com.google.javascript/closure-compiler-unshaded], :paths [&quot;/home/asus/.m2/repository/com/google/code/gson/gson/2.7/gson-2.7.jar&quot;], :children ()}}, :test-paths [&quot;/home/asus/brave-clojure/test&quot;]}" />
              <option name="hash" value="52a2ca7778fbab1c491f9fbf5252b91a" />
            </ModuleDetails>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2MKWkO7dNEgc7uBmp0irC3WwDIi" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/home/asus/carreraprogrammer/dataico&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\carre\Desktop\carrera.programmer\brave-clojure\src" />
    </key>
  </component>
  <component name="ReplState" timestamp="1677989333492">{:repl-history {:ide [], :local [{:command &quot;(def abs-dif (fn [[a b]] (Math/abs (- a b))))&quot;, :offset 45, :ns &quot;user&quot;} {:command &quot;((fn [[a b]] (Math/abs (- a b))) [-3 20])&quot;, :offset 41, :ns &quot;user&quot;} {:command &quot;(def abs-dif (comp (fn [[a b]] (Math/abs (- a b))) (partial min-max)))&quot;, :offset 70, :ns &quot;user&quot;} {:command &quot;(def numbers [1 5 -3 7 2 4])&quot;, :offset 28, :ns &quot;user&quot;} {:command &quot;(abs-dif numbers)&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(defn list-of-products [products]\n  (map :name products))&quot;, :offset 57, :ns &quot;user&quot;} {:command &quot;(list-of-products products)&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(def alphabetical-ordered-products (comp (partoal sort &gt;) (partial map :name)))&quot;, :offset 79, :ns &quot;user&quot;} {:command &quot;(def alphabetical-ordered-products (comp (partial sort &gt;) (partial map :name)))&quot;, :offset 79, :ns &quot;user&quot;} {:command &quot;(def products [{:name \&quot;Apple\&quot; :price 0.5}\n               {:name \&quot;Banana\&quot; :price 0.25}\n               {:name \&quot;Carrot\&quot; :price 0.1}])&quot;, :offset 130, :ns &quot;user&quot;} {:command &quot;(def alphabetical-ordered-products (comp (sort &gt;) (partial map :name)))&quot;, :offset 71, :ns &quot;user&quot;} {:command &quot;(map :name products)&quot;, :offset 20, :ns &quot;user&quot;} {:command &quot;(def products [{:name \&quot;Apple\&quot; :price 0.5}\n               {:name \&quot;Carrot\&quot; :price 0.1}\n               {:name \&quot;Banana\&quot; :price 0.25}\n               {:name \&quot;Pineapple\&quot; :price 0.1}\n               {:name \&quot;Vanilla\&quot; :price 0.1}\n              ])&quot;, :offset 235, :ns &quot;user&quot;} {:command &quot;(def products [{:name \&quot;Pineapple\&quot; :price 0.1}\n               {:name \&quot;Apple\&quot; :price 0.5}\n               {:name \&quot;Carrot\&quot; :price 0.1}\n               {:name \&quot;Banana\&quot; :price 0.25}\n               {:name \&quot;Vanilla\&quot; :price 0.1}\n              ])&quot;, :offset 235, :ns &quot;user&quot;} {:command &quot;(def products [{:name \&quot;Pineapple\&quot; :price 0.1}\n               {:name \&quot;Apple\&quot; :price 0.5}\n               {:name \&quot;Carrot\&quot; :price 0.1}\n               {:name \&quot;Vanilla\&quot; :price 0.1}\n               {:name \&quot;Banana\&quot; :price 0.25}\n              ])&quot;, :offset 235, :ns &quot;user&quot;} {:command &quot;(sort (map :name products))&quot;, :offset 27, :ns &quot;user&quot;} {:command &quot;(def alphabetical-ordered-products (comp (partial sort) (partial map :name)))&quot;, :offset 77, :ns &quot;user&quot;} {:command &quot;(alphabetical-ordered-products products)&quot;, :offset 40, :ns &quot;user&quot;} {:command &quot;(defn replace-vowel-by-x [word]\n  (map #(clojure.string/replace word #\&quot;([aeiou])\&quot; \&quot;X\&quot;)))&quot;, :offset 88, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map #(clojure.string/replace word #\&quot;([aeiou])\&quot; \&quot;X\&quot;)))&quot;, :offset 78, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;)))&quot;, :offset 75, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word))&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (clojure.string/join (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word) \&quot;\&quot;))&quot;, :offset 105, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (clojure.string/join (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word) \&quot; \&quot;))&quot;, :offset 106, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map clojure.string/join (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word) \&quot;\&quot;))&quot;, :offset 109, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map clojure.string/join \&quot;\&quot; (map #(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word) ))&quot;, :offset 110, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (map str (#(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word)))&quot;, :offset 86, :ns &quot;user&quot;} {:command &quot;(vowel-&gt;x \&quot;Good morning\&quot;)&quot;, :offset 25, :ns &quot;user&quot;} {:command &quot;(defn change-letter (comp (partial vowel-&gt;x) (partial map #(str/upper-case %))))&quot;, :offset 80, :ns &quot;user&quot;} {:command &quot;(str/upper-case \&quot;hola mundo\&quot;) &quot;, :offset 30, :ns &quot;user&quot;} {:command &quot;(defn change-letter (comp (partial vowel-&gt;x) (partial map #(upcase %))))&quot;, :offset 72, :ns &quot;user&quot;} {:command &quot;(upcase \&quot;hola mundo\&quot;)&quot;, :offset 21, :ns &quot;user&quot;} {:command &quot;(clojure.string/upper-case \&quot;hola\&quot;)&quot;, :offset 34, :ns &quot;user&quot;} {:command &quot;(defn change-letter (comp (partial vowel-&gt;x) (partial map #(clojure.string/upper-case %))))&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(def change-letter (comp (partial vowel-&gt;x) (partial map #(clojure.string/upper-case %))))&quot;, :offset 90, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial vowel-&gt;x) (partial map #(clojure.string/upper-case %))))&quot;, :offset 91, :ns &quot;user&quot;} {:command &quot;(map #(clojure.string/upper-case %) strings)&quot;, :offset 44, :ns &quot;user&quot;} {:command &quot;(def strings [\&quot;hello\&quot; \&quot;world\&quot; \&quot;clojure\&quot; \&quot;partial\&quot; \&quot;comp\&quot;])&quot;, :offset 58, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (apply str (#(clojure.string/replace % #\&quot;([aeiou])\&quot; \&quot;X\&quot;) word)))&quot;, :offset 88, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial map vowel-&gt;x) (partial (vec (map #(clojure.string/upper-case %))))))&quot;, :offset 103, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial map vowel-&gt;x) (partial vec) (partial (map #(clojure.string/upper-case %)))))&quot;, :offset 111, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial map vowel-&gt;x) (partial vector) (partial (map #(clojure.string/upper-case %)))))&quot;, :offset 114, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial map vowel-&gt;x) (partial (map #(clojure.string/upper-case %)))))&quot;, :offset 97, :ns &quot;user&quot;} {:command &quot;(vowel-&gt;x \&quot;hello\&quot;)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (apply str (#(clojure.string/replace % #\&quot;([aeiou/AEIOU])\&quot; \&quot;X\&quot;) word)))&quot;, :offset 94, :ns &quot;user&quot;} {:command &quot;(defn vowel-&gt;x [word]\n  (apply str (#(clojure.string/replace % #\&quot;(?i)([aeiou])\&quot; \&quot;X\&quot;) word)))&quot;, :offset 92, :ns &quot;user&quot;} {:command &quot;(def change-strings (comp (partial map vowel-&gt;x) (partial map #(clojure.string/upper-case %))))&quot;, :offset 95, :ns &quot;user&quot;} {:command &quot;(change-strings strings)&quot;, :offset 24, :ns &quot;user&quot;} {:command &quot;(count (:orders customer-orders))&quot;, :offset 33, :ns &quot;user&quot;} {:command &quot;(def customer-orders [{:name \&quot;Alice\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                              {:item \&quot;DVD\&quot; :price 15}\n                                              {:item \&quot;Laptop\&quot; :price 800}]}\n                      {:name \&quot;Bob\&quot; :orders [{:item \&quot;Shirt\&quot; :price 25}\n                                            {:item \&quot;Hat\&quot; :price 12}]}\n                      {:name \&quot;Charlie\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                                {:item \&quot;DVD\&quot; :price 15}]}])&quot;, :offset 505, :ns &quot;user&quot;} {:command &quot;(map #(count %) (get-in customer-orders [:orders]))&quot;, :offset 51, :ns &quot;user&quot;} {:command &quot;(count [1 2 3 4])&quot;, :offset 17, :ns &quot;user&quot;} {:command &quot;(count [{:item \&quot;Shirt\&quot; :price 25}\n        {:item \&quot;Hat\&quot; :price 12}])&quot;, :offset 67, :ns &quot;user&quot;} {:command &quot;(map #(count %) (:orders customer-orders))&quot;, :offset 42, :ns &quot;user&quot;} {:command &quot;(map :orders customer-orders)&quot;, :offset 29, :ns &quot;user&quot;} {:command &quot;(filter (fn [map] ( &gt; (map #(count %) (map :orders customer-orders)) 1)))&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(filter (fn [map] ( &gt; (map #(count %) (map :orders customer-orders)) 1)) customer-orders)&quot;, :offset 89, :ns &quot;user&quot;} {:command &quot;(map #(count %) (map :orders customer-orders))&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(filter #(&gt; (count (:orders %)) 1) collection)&quot;, :offset 46, :ns &quot;user&quot;} {:command &quot;(reduce + (map #(get-in % [:orders]) customer-orders))&quot;, :offset 54, :ns &quot;user&quot;} {:command &quot;(reduce + (map #(get-in % [:orders price]) customer-orders))&quot;, :offset 60, :ns &quot;user&quot;} {:command &quot;(reduce + (map #(get-in % [:orders :price]) customer-orders))&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;(map :price (map #(get-in % [:orders]) customer-orders))&quot;, :offset 56, :ns &quot;user&quot;} {:command &quot;(reduce +  (map #(:price %) (map #(get-in % [:orders]) customer-orders)))&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(map #(:price %) (map #(get-in % [:orders]) customer-orders))&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;(map #(get-in % [:orders]) customer-orders)&quot;, :offset 43, :ns &quot;user&quot;} {:command &quot;(def orders (map #(get-in % [:orders :price]) customer-orders))&quot;, :offset 63, :ns &quot;user&quot;} {:command &quot;orders&quot;, :offset 6, :ns &quot;user&quot;} {:command &quot;(map #(get-in % [:orders :price]) customer-orders)&quot;, :offset 50, :ns &quot;user&quot;} {:command &quot;(defn customer-names-by-total-spending [customer-orders]\n  (let [customer-orders-pairs (map #(vector (:name %) (reduce + (map :price (:orders %)))) customer-orders)\n        filtered-pairs (filter #(&gt; (second %) (* 2 10)) customer-orders-pairs)\n        sorted-pairs (sort-by second &gt;)]\n    (map first sorted-pairs)))&quot;, :offset 315, :ns &quot;user&quot;} {:command &quot;(customer-names-by-total-spending customer-orders)&quot;, :offset 50, :ns &quot;user&quot;} {:command &quot;(def orders (map #(get-in % [:orders]) customer-orders))&quot;, :offset 56, :ns &quot;user&quot;} {:command &quot;(println orders)&quot;, :offset 16, :ns &quot;user&quot;} {:command &quot;(defn mor-than-1-order filter #(&gt; (count (:orders %)) 1) customer-orders)&quot;, :offset 73, :ns &quot;user&quot;} {:command &quot;(def mor-than-1-order filter #(&gt; (count (:orders %)) 1) customer-orders)&quot;, :offset 72, :ns &quot;user&quot;} {:command &quot;(filter #(&gt; (count (:prices (:orders %))) 1) customer-orders)&quot;, :offset 61, :ns &quot;user&quot;} {:command &quot;((reduce + (map :price [{:item \&quot;Book\&quot; :price 10}\n           {:item \&quot;DVD\&quot; :price 15}\n           {:item \&quot;Laptop\&quot; :price 800}])))&quot;, :offset 126, :ns &quot;user&quot;} {:command &quot;(reduce + (map :price [{:item \&quot;Book\&quot; :price 10}\n           {:item \&quot;DVD\&quot; :price 15}\n           {:item \&quot;Laptop\&quot; :price 800}]))&quot;, :offset 124, :ns &quot;user&quot;} {:command &quot;(map :orders (filter #(&gt; (count (:orders %)) 1) customer-orders))&quot;, :offset 65, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          :orders\n                          (filter #(&gt; (count (:orders %)) 1) customer-orders)))&quot;, :offset 144, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map :orders)\n                          (filter #(&gt; (count (:orders %)) 1) customer-orders)))&quot;, :offset 158, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map :orders)\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 150, :ns &quot;user&quot;} {:command &quot;(def customer-orders [{:name \&quot;Alice\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                              {:item \&quot;DVD\&quot; :price 15}\n                                              {:item \&quot;Laptop\&quot; :price 800}]}\n                      {:name \&quot;Bob\&quot; :orders [{:item \&quot;Shirt\&quot; :price 25}\n                                            {:item \&quot;Hat\&quot; :price 12}]}\n                      {:name \&quot;Charlie\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                               ]}\n                      {:name \&quot;Christian\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                                {:item \&quot;DVD\&quot; :price 15}]}\n                      {:name \&quot;Pam\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                                {:item \&quot;DVD\&quot; :price 15}]}\n                      {:name \&quot;Ana\&quot; :orders []}\n                      ])&quot;, :offset 843, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map #(assoc {} :name (:name %)))\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 170, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map (fn [map] (assoc {} :name (:name map) :total-spent (reduce + (map #(get-in % [:price]) map)))))\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 237, :ns &quot;user&quot;} {:command &quot;(partial map (fn [spents-map] (assoc {} :name (:name spents-map) :total-spent (reduce + (map #(get-in % [:price]) spents-map)))))&quot;, :offset 129, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map (fn [spents-map] (assoc {} :name (:name spents-map) :total-spent (reduce + (map #(get-in % [:price]) spents-map)))))\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 258, :ns &quot;user&quot;} {:command &quot;(filter #(&gt; (count (:orders %)) 1) customer-orders)&quot;, :offset 51, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map (fn [spents-map] (assoc {} :name (:name spents-map) :total-spent (reduce +(map :price (:orders spent-pams))))))\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 253, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce +(map :price (:orders spent-map))))))\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 250, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial sort &gt;)\n                          (partial map :name)\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 369, :ns &quot;user&quot;} {:command &quot;(def customer-orders [{:name \&quot;Alice\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                              {:item \&quot;DVD\&quot; :price 15}\n                                              {:item \&quot;Laptop\&quot; :price 800}]}\n                      {:name \&quot;Bob\&quot; :orders [{:item \&quot;Shirt\&quot; :price 25}\n                                            {:item \&quot;Hat\&quot; :price 12}]}\n                      {:name \&quot;Charlie\&quot; :orders [{:item \&quot;Book\&quot; :price 300}\n                                               ]}\n                      {:name \&quot;Christian\&quot; :orders [{:item \&quot;Book\&quot; :price 10}\n                                                {:item \&quot;DVD\&quot; :price 15}]}\n                      {:name \&quot;Pam\&quot; :orders [{:item \&quot;Mcbook\&quot; :price 1000}\n                                                {:item \&quot;DVD\&quot; :price 15}]}\n                      {:name \&quot;Ana\&quot; :orders []}\n                      ])&quot;, :offset 848, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial sort)\n                          (partial map :name)\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 367, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial map :name)\n                          (partial sort :total-spent)\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 380, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                        \n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 305, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial sort-by :total-spent)\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 337, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial sort-by :total-spent &gt;)\n                          (partial map (fn [spent-map] (assoc {} :name (:name spent-map) :total-spent (reduce + (map :price (:orders spent-map)))))) ;; Obtain total spent by name\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 339, :ns &quot;user&quot;} {:command &quot;(def customers-by-spent (comp\n                          (partial map :name)               ;; create list of names\n                          (partial sort-by :total-spent &gt;)  ;; order for total-spent\n                          (partial map (fn [spent-map] (assoc {} ;; Create a map with name + total-spent\n                                                         :name (:name spent-map)\n                                                         :total-spent (reduce + ; Reduce the spents\n                                                                              (map :price (:orders spent-map)))))) ;; Obtain a list of spents\n                          (partial filter #(&gt; (count (:orders %)) 1))))&quot;, :offset 698, :ns &quot;user&quot;} {:command &quot;(customers-by-spent customer-orders)&quot;, :offset 36, :ns &quot;user&quot;} {:command &quot;(defn map-of-words [words]\n  (map #(assoc {} :word % :length (count %)) words))&quot;, :offset 79, :ns &quot;user&quot;}], :remote []}}</component>
  <component name="RunManager">
    <configuration default="true" type="Babashka" factoryName="BabashkaLocalRepl" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="bbPath" value="" />
      <setting name="parameters" value="" />
      <option name="PARENT_ENVS" value="true" />
      <setting name="workingDir" value="" />
      <setting name="focusEditor" value="false" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" nameIsGenerated="true">
      <module name="brave-clojure" />
      <setting name="displayName" value="Unnamed" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="displayName" value="" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="replPortFileType" value="STANDARD" />
      <setting name="customPortFile" value="" />
      <setting name="fixLineNumbers" value="false" />
      <setting name="focusEditor" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="13c3015d-8695-4779-8255-099ac37eba74" name="Changes" comment="" />
      <created>1677516898417</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1677516898417</updated>
    </task>
    <servers />
  </component>
</project>